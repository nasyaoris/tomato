// Code generated by MockGen. DO NOT EDIT.
// Source: handler/queue/queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResource is a mock of Resource interface
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockResource) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockResourceMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockResource)(nil).Open))
}

// Ready mocks base method
func (m *MockResource) Ready() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockResourceMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockResource)(nil).Ready))
}

// Reset mocks base method
func (m *MockResource) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockResourceMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResource)(nil).Reset))
}

// Close mocks base method
func (m *MockResource) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockResourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResource)(nil).Close))
}

// Listen mocks base method
func (m *MockResource) Listen(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockResourceMockRecorder) Listen(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockResource)(nil).Listen), target)
}

func (m *MockResource) ListenForever(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForever", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockResourceMockRecorder) ListenForever(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForever", reflect.TypeOf((*MockResource)(nil).ListenForever), target)
}

func (m *MockResource) ListenFaultTolerance(state string, target string, expectedError int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenFaultTolerance", state, target, expectedError)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockResourceMockRecorder) ListenFaultTolerance(state, target, expectedError interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenFaultTolerance", reflect.TypeOf((*MockResource)(nil).ListenFaultTolerance), target)
}

// Fetch mocks base method
func (m *MockResource) Fetch(target string) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", target)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockResourceMockRecorder) Fetch(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockResource)(nil).Fetch), target)
}

// Publish mocks base method
func (m *MockResource) Publish(target string, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", target, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockResourceMockRecorder) Publish(target, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockResource)(nil).Publish), target, payload)
}

// PublishFromFile mocks base method
func (m *MockResource) PublishFromFile(target, file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishFromFile", target, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishFromFile indicates an expected call of PublishFromFile
func (mr *MockResourceMockRecorder) PublishFromFile(target, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishFromFile", reflect.TypeOf((*MockResource)(nil).PublishFromFile), target, file)
}
